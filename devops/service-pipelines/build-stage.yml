#  Copyright Â© Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#####################
# README: Defines an common build stage that any external app service pipeline can call into.
#####################

parameters:
  serviceBase: ''
  copyFileContentsToFlatten: ''
  copyFileContents: ''
  mavenGoal: 'clean install'
  serviceCoreMavenGoal: 'install'
  serviceCoreMavenOptions: ''
  testingRootFolder: 'testing/integration-tests'
  mavenPomFile: 'pom.xml'
  mavenPublishJUnitResults: false
  mavenOptions: ''

stages:

- stage: 'Build'
  variables:
    artifactName: 'drop'

  jobs:
  - job: Build_Test_Copy_Publish
    displayName: Perform Maven build and unit test / code coverage
    pool:
      name: $(AGENT_POOL)
      demands: maven
    workspace:
      clean: all
    steps:
    - download: none

    - task: Maven@3
      displayName: 'Maven Core Build'
      condition: ne('${{ parameters.serviceCoreMavenOptions }}', '')
      inputs:
        mavenPomFile: ${{ parameters.mavenPomFile }}
        options: ${{ parameters.serviceCoreMavenOptions }}
        goals: ${{ parameters.serviceCoreMavenGoal }}
        publishJUnitResults: ${{ parameters.mavenPublishJUnitResults }}

    - task: Maven@3
      displayName: 'Maven Build'
      inputs:
        mavenPomFile: ${{ parameters.mavenPomFile }}
        options: ${{ parameters.mavenOptions }}
        goals: ${{ parameters.mavenGoal }}
        publishJUnitResults: ${{ parameters.mavenPublishJUnitResults }}

    - task: ArchiveFiles@2
      displayName: 'Archive integration tests'
      inputs:
        rootFolderOrFile: ${{ parameters.testingRootFolder }}
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: $(Build.ArtifactStagingDirectory)/${{ parameters.serviceBase }}-integration-tests.zip
        replaceExistingArchive: true

    - task: CopyFiles@2
      condition: ne('${{ parameters.copyFileContentsToFlatten }}', '')
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder:
        Contents: ${{ parameters.copyFileContentsToFlatten }}
        TargetFolder: '$(build.artifactstagingdirectory)'
        flattenFolders: true

    - task: CopyFiles@2
      displayName: 'Copy artifacts for maven deploy to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder:
        Contents: ${{ parameters.copyFileContents }}
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ${{ variables.artifactName }}'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '${{ variables.artifactName }}'
        publishLocation: 'Container'
      condition: succeededOrFailed()
