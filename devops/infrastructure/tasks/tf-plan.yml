#  Copyright Â© Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

parameters:
    aksAgentSshPublicKeyFilename: ''
    aksGitOpsSshPrivateKeyFilename: ''
    terraformWorkspacePrefix: ''
    environmentName: ''


steps:
  - task: DownloadSecureFile@1
    name: 'aksPublicAgentKeySecureDownload'  # The name with which to reference the secure file's path on the agent.
    inputs:
      secureFile: ${{ parameters.aksAgentSshPublicKeyFilename }} # The file name or GUID of the secure file

  - task: DownloadSecureFile@1
    name: 'aksPrivateGitopsKeySecureDownload'  # The name with which to reference the secure file's path on the agent.
    inputs:
      secureFile: ${{ parameters.aksGitOpsSshPrivateKeyFilename }} # The file name or GUID of the secure file

  - task: AzureCLI@1
    displayName: 'TF Plan'
    env:
      TF_VAR_remote_state_container: $(TF_VAR_remote_state_container)
      TF_VAR_remote_state_account: $(TF_VAR_remote_state_account)
      TF_VAR_cosmosdb_replica_location: $(TF_VAR_cosmosdb_replica_location)
      TF_VAR_resource_group_location: $(TF_VAR_resource_group_location)
      TF_VAR_common_resources_workspace_name: $(TF_VAR_common_resources_workspace_name)
      TF_VAR_data_resources_workspace_name: $(TF_VAR_data_resources_workspace_name)
      TF_VAR_gitops_ssh_url: $(TF_VAR_gitops_ssh_url)
      TF_VAR_gitops_url_branch: $(TF_VAR_gitops_url_branch)
      TF_VAR_aks_agent_vm_count: $(TF_VAR_aks_agent_vm_count)
      TF_VAR_flux_recreate: $(TF_VAR_flux_recreate)
      TF_VAR_gitops_branch: $(TF_VAR_gitops_branch)
      TF_VAR_ssh_public_key_file: $(aksPublicAgentKeySecureDownload.secureFilePath)
      TF_VAR_gitops_ssh_key_file: $(aksPrivateGitopsKeySecureDownload.secureFilePath)
      TF_VAR_elasticsearch_username: $(elastic-username-${{ parameters.terraformWorkspacePrefix }}-${{ parameters.environmentName }})
      TF_VAR_elasticsearch_password: $(elastic-password-${{ parameters.terraformWorkspacePrefix }}-${{ parameters.environmentName }})
      TF_VAR_elasticsearch_endpoint: $(elastic-endpoint-${{ parameters.terraformWorkspacePrefix }}-${{ parameters.environmentName }})

    inputs:
      azureSubscription: '$(SERVICE_CONNECTION_NAME)'
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        #!/usr/bin/env bash
        set -euo pipefail
        set -o nounset

        function terraformVersionCheck() {
            if [[ $(which terraform) && $(terraform --version | head -n1 | cut -d" " -f2 | cut -c 2\-) == $TF_VERSION ]]; then
                echo "Terraform version check completed"
              else
                TF_ZIP_TARGET="https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_${TF_VERSION}_linux_amd64.zip"
                echo "Info: installing $TF_VERSION, target: $TF_ZIP_TARGET"

                wget $TF_ZIP_TARGET -q
                unzip -q "terraform_${TF_VERSION}_linux_amd64.zip"
                sudo mv terraform /usr/local/bin
                rm *.zip
            fi

            terraform -version
            # Assert that jq is available, and install if it's not
            command -v jq >/dev/null 2>&1 || { echo >&2 "Installing jq"; sudo apt install -y jq; }
        }

        terraformVersionCheck

        cd $TF_TEMPLATE_WORKING_DIR

        # Clear all previous plans
        rm -f *.out
        # Setting the scripts to be run as executable
        chmod -f 752 *.sh || true

        export ARM_TENANT_ID=$tenantId
        export ARM_CLIENT_SECRET=$servicePrincipalKey
        export ARM_CLIENT_ID=$servicePrincipalId
        export ARM_ACCESS_KEY=$(az storage account keys list --subscription "$ARM_SUBSCRIPTION_ID" --account-name "$(TF_VAR_remote_state_account)" --query "[0].value" --output tsv)

        TF_PLAN_FILE="${TF_WORKSPACE_NAME}_plan.out"
        TF_CLI_ARGS=${TF_CLI_ARGS:-}

        echo "TF_WORKSPACE_NAME: ${TF_WORKSPACE_NAME}"
        echo "File 1: $(aksPublicAgentKeySecureDownload.secureFilePath)"
        echo "File 2: $(aksPrivateGitopsKeySecureDownload.secureFilePath)"

        terraform plan $TF_CLI_ARGS -input=false -out $TF_PLAN_FILE
